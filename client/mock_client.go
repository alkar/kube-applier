// Code generated by MockGen. DO NOT EDIT.
// Source: client/client.go

// Package client is a generated GoMock package.
package client

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/utilitywarehouse/kube-applier/apis/kubeapplier/v1alpha1"
	reflect "reflect"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockClientInterface is a mock of ClientInterface interface
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// ListApplications mocks base method
func (m *MockClientInterface) ListApplications(ctx context.Context) ([]v1alpha1.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplications", ctx)
	ret0, _ := ret[0].([]v1alpha1.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplications indicates an expected call of ListApplications
func (mr *MockClientInterfaceMockRecorder) ListApplications(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockClientInterface)(nil).ListApplications), ctx)
}

// GetApplication mocks base method
func (m *MockClientInterface) GetApplication(ctx context.Context, key client.ObjectKey) (*v1alpha1.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplication", ctx, key)
	ret0, _ := ret[0].(*v1alpha1.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication
func (mr *MockClientInterfaceMockRecorder) GetApplication(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockClientInterface)(nil).GetApplication), ctx, key)
}

// UpdateApplication mocks base method
func (m *MockClientInterface) UpdateApplication(ctx context.Context, app *v1alpha1.Application) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplication", ctx, app)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateApplication indicates an expected call of UpdateApplication
func (mr *MockClientInterfaceMockRecorder) UpdateApplication(ctx, app interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplication", reflect.TypeOf((*MockClientInterface)(nil).UpdateApplication), ctx, app)
}

// UpdateApplicationStatus mocks base method
func (m *MockClientInterface) UpdateApplicationStatus(ctx context.Context, app *v1alpha1.Application) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplicationStatus", ctx, app)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateApplicationStatus indicates an expected call of UpdateApplicationStatus
func (mr *MockClientInterfaceMockRecorder) UpdateApplicationStatus(ctx, app interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationStatus", reflect.TypeOf((*MockClientInterface)(nil).UpdateApplicationStatus), ctx, app)
}

// PrunableResourceGVKs mocks base method
func (m *MockClientInterface) PrunableResourceGVKs() ([]string, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrunableResourceGVKs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PrunableResourceGVKs indicates an expected call of PrunableResourceGVKs
func (mr *MockClientInterfaceMockRecorder) PrunableResourceGVKs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrunableResourceGVKs", reflect.TypeOf((*MockClientInterface)(nil).PrunableResourceGVKs))
}
